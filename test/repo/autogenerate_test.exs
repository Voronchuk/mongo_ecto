defmodule MongoEcto.Repo.AutogenerateTest do
    require MongoEcto.Repo, as: TestRepo
    use ExUnit.Case, async: true

        defmodule Account do
            use Ecto.Schema
            use MongoEcto.Model, :model

            @collection_name "accounts"
            @primary_key {:id, :binary_id, autogenerate: true}

            embedded_schema do
                field :nickname, :string
                field :email, :string

                timestamps
            end
        end

        defmodule NoTimestampsAccount do
            use Ecto.Schema
            use MongoEcto.Model, :model

            @collection_name "accounts"
            @primary_key {:id, :binary_id, autogenerate: true}

            embedded_schema do
                field :nickname, :string
                field :email, :string
            end
        end

        test "`timestamps` fields autogenerates on insert" do
            account = %Account{nickname: "test", email: "test345@gmail.com"}
            {:ok, result} = TestRepo.insert(account)
            assert match? %Account{inserted_at: %Ecto.DateTime{}}, result
            assert match? %Account{updated_at: %Ecto.DateTime{}}, result
            clean_after_insert(result)
        end

        test "entity contains `timestamps` fields autogenerated by insert" do
            account = %Account{nickname: "test", email: "test345@gmail.com"}
            {:ok, result} = TestRepo.insert(account)
            entity = TestRepo.get!(Account, result.id)
            assert match? %Account{inserted_at: %Ecto.DateTime{}}, entity
            assert match? %Account{updated_at: %Ecto.DateTime{}}, entity
            clean_after_insert(entity)
        end

        test "get_by `timestamps` fields autogenerated by insert" do
            account = %Account{nickname: "test", email: "test345@gmail.com"}
            {:ok, result} = TestRepo.insert(account)

            query_by_inserted = %{"inserted_at" => ecto_datetime_to_mongo(result.inserted_at)}
            query_by_updated = %{"updated_at" => ecto_datetime_to_mongo(result.updated_at)}
            query_by_inserted_and_updated = Map.merge(query_by_inserted, query_by_updated)

            entity_by_inserted = TestRepo.get_by(Account, query_by_inserted)
            entity_by_updated = TestRepo.get_by(Account, query_by_inserted)
            entity_by_inserted_and_updated = TestRepo.get_by(Account, query_by_inserted_and_updated)

            assert match? ^entity_by_inserted, result
            assert match? ^entity_by_updated, result
            assert match? ^entity_by_inserted_and_updated, result
            clean_after_insert(result)
        end


        test "`timestamps` fields autogenerates on update" do
            account = %Account{nickname: "test", email: "test345@gmail.com"}
            {:ok, result} = TestRepo.insert(account)
            changeset = Ecto.Changeset.change(result, %{updated_at: nil})
            {:ok, result} = TestRepo.update(changeset)
            assert match? %Account{updated_at: %Ecto.DateTime{}}, result
            clean_after_insert(result)
        end

        test "entity contains `timestamps` fields autogenerated by update" do
            account = %Account{nickname: "test", email: "test345@gmail.com"}
            {:ok, result} = TestRepo.insert(account)
            changeset = Ecto.Changeset.change(result, %{updated_at: nil})
            {:ok, result} = TestRepo.update(changeset)
            entity = TestRepo.get!(Account, result.id)
            updated_at = result.updated_at
            entity_updated_at = entity.updated_at
            assert match? %Account{updated_at: %Ecto.DateTime{}}, entity
            assert match? ^updated_at, entity_updated_at
            clean_after_insert(entity)
        end

        defp clean_after_insert(record), do: TestRepo.delete! record

        defp ecto_datetime_to_mongo(ecto_timestamp = %Ecto.DateTime{}) do
            {:ok, datetime} = Ecto.DateTime.dump(ecto_timestamp)
            BSON.DateTime.from_datetime(datetime)
        end
end